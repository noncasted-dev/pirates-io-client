//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Features/Global/Services/InputViews/Config/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""98d3b2ff-9a15-42b1-bc36-b64f77d5f962"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c5d5654c-ffa4-435a-b183-4ffec1ec792f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RangeAttack"",
                    ""type"": ""Button"",
                    ""id"": ""50319b66-920d-45f8-81de-bdf2ca94fb4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RangeAttackBreak"",
                    ""type"": ""Button"",
                    ""id"": ""a3c88cc7-5f7b-4e78-b274-8915fadf3a20"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""d164d24b-c62d-4fc9-98c9-ccae50211995"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Map"",
                    ""type"": ""Button"",
                    ""id"": ""c8776cf0-b91d-42e3-9650-08d2f2f5124f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectFirstProjectile"",
                    ""type"": ""Button"",
                    ""id"": ""b69ce820-0b10-4802-b169-dc7ec0bd3678"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectSecondProjectile"",
                    ""type"": ""Button"",
                    ""id"": ""2e27f3fe-d012-453b-8a4d-9afb1c517143"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectThirdProjectile"",
                    ""type"": ""Button"",
                    ""id"": ""974ad441-4676-4d80-9972-7e2b73ace1a1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectForthProjectile"",
                    ""type"": ""Button"",
                    ""id"": ""7ca70651-7844-4876-8594-a5c59bb89ac1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""dba989dc-40ef-4258-99bc-ed4632ae2be2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""525a1db1-5a65-4d8b-95a7-a9ac82f819c4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5c640ea0-0654-4251-89e6-a8336658d469"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""793d39f0-abd9-4f20-9da2-5ee6fa1c4111"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b2d57f69-e210-4880-b554-4bf6decd0f24"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2080924a-dc85-4676-a0fa-6417b6ed8408"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RangeAttack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba5c74f2-8f6e-427b-8d54-4bd2dce24a44"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RangeAttackBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c8a6cdc-d04e-4408-95c9-de740fb6ad17"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RangeAttackBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87c63807-0a18-45f9-915f-92525b58838e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6109987f-bd2a-4b84-a179-e478f7b744ab"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7ec46c2-e9df-4476-b6af-e81d87fffac9"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectFirstProjectile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4a90f797-7eaf-4f10-a20f-348921215a3a"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectSecondProjectile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""380fbfce-e952-448d-9db8-531f33af32e3"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectThirdProjectile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caebab6e-c7f1-45f5-a8af-1fbdccc7d9d5"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectForthProjectile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Debug"",
            ""id"": ""60e981ee-88bb-4b19-b6b8-0e1b22d00a8a"",
            ""actions"": [
                {
                    ""name"": ""Console"",
                    ""type"": ""Button"",
                    ""id"": ""49b67ce7-c81a-42ad-9d78-62f550fbba04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""cc478c29-06e8-4102-896e-a9caf6e62102"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Console"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Movement = m_GamePlay.FindAction("Movement", throwIfNotFound: true);
        m_GamePlay_RangeAttack = m_GamePlay.FindAction("RangeAttack", throwIfNotFound: true);
        m_GamePlay_RangeAttackBreak = m_GamePlay.FindAction("RangeAttackBreak", throwIfNotFound: true);
        m_GamePlay_Inventory = m_GamePlay.FindAction("Inventory", throwIfNotFound: true);
        m_GamePlay_Map = m_GamePlay.FindAction("Map", throwIfNotFound: true);
        m_GamePlay_SelectFirstProjectile = m_GamePlay.FindAction("SelectFirstProjectile", throwIfNotFound: true);
        m_GamePlay_SelectSecondProjectile = m_GamePlay.FindAction("SelectSecondProjectile", throwIfNotFound: true);
        m_GamePlay_SelectThirdProjectile = m_GamePlay.FindAction("SelectThirdProjectile", throwIfNotFound: true);
        m_GamePlay_SelectForthProjectile = m_GamePlay.FindAction("SelectForthProjectile", throwIfNotFound: true);
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_Console = m_Debug.FindAction("Console", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private IGamePlayActions m_GamePlayActionsCallbackInterface;
    private readonly InputAction m_GamePlay_Movement;
    private readonly InputAction m_GamePlay_RangeAttack;
    private readonly InputAction m_GamePlay_RangeAttackBreak;
    private readonly InputAction m_GamePlay_Inventory;
    private readonly InputAction m_GamePlay_Map;
    private readonly InputAction m_GamePlay_SelectFirstProjectile;
    private readonly InputAction m_GamePlay_SelectSecondProjectile;
    private readonly InputAction m_GamePlay_SelectThirdProjectile;
    private readonly InputAction m_GamePlay_SelectForthProjectile;
    public struct GamePlayActions
    {
        private @Controls m_Wrapper;
        public GamePlayActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_GamePlay_Movement;
        public InputAction @RangeAttack => m_Wrapper.m_GamePlay_RangeAttack;
        public InputAction @RangeAttackBreak => m_Wrapper.m_GamePlay_RangeAttackBreak;
        public InputAction @Inventory => m_Wrapper.m_GamePlay_Inventory;
        public InputAction @Map => m_Wrapper.m_GamePlay_Map;
        public InputAction @SelectFirstProjectile => m_Wrapper.m_GamePlay_SelectFirstProjectile;
        public InputAction @SelectSecondProjectile => m_Wrapper.m_GamePlay_SelectSecondProjectile;
        public InputAction @SelectThirdProjectile => m_Wrapper.m_GamePlay_SelectThirdProjectile;
        public InputAction @SelectForthProjectile => m_Wrapper.m_GamePlay_SelectForthProjectile;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void SetCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMovement;
                @RangeAttack.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRangeAttack;
                @RangeAttack.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRangeAttack;
                @RangeAttack.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRangeAttack;
                @RangeAttackBreak.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRangeAttackBreak;
                @RangeAttackBreak.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRangeAttackBreak;
                @RangeAttackBreak.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnRangeAttackBreak;
                @Inventory.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnInventory;
                @Map.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMap;
                @Map.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMap;
                @Map.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnMap;
                @SelectFirstProjectile.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectFirstProjectile;
                @SelectFirstProjectile.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectFirstProjectile;
                @SelectFirstProjectile.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectFirstProjectile;
                @SelectSecondProjectile.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectSecondProjectile;
                @SelectSecondProjectile.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectSecondProjectile;
                @SelectSecondProjectile.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectSecondProjectile;
                @SelectThirdProjectile.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectThirdProjectile;
                @SelectThirdProjectile.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectThirdProjectile;
                @SelectThirdProjectile.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectThirdProjectile;
                @SelectForthProjectile.started -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectForthProjectile;
                @SelectForthProjectile.performed -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectForthProjectile;
                @SelectForthProjectile.canceled -= m_Wrapper.m_GamePlayActionsCallbackInterface.OnSelectForthProjectile;
            }
            m_Wrapper.m_GamePlayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @RangeAttack.started += instance.OnRangeAttack;
                @RangeAttack.performed += instance.OnRangeAttack;
                @RangeAttack.canceled += instance.OnRangeAttack;
                @RangeAttackBreak.started += instance.OnRangeAttackBreak;
                @RangeAttackBreak.performed += instance.OnRangeAttackBreak;
                @RangeAttackBreak.canceled += instance.OnRangeAttackBreak;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @Map.started += instance.OnMap;
                @Map.performed += instance.OnMap;
                @Map.canceled += instance.OnMap;
                @SelectFirstProjectile.started += instance.OnSelectFirstProjectile;
                @SelectFirstProjectile.performed += instance.OnSelectFirstProjectile;
                @SelectFirstProjectile.canceled += instance.OnSelectFirstProjectile;
                @SelectSecondProjectile.started += instance.OnSelectSecondProjectile;
                @SelectSecondProjectile.performed += instance.OnSelectSecondProjectile;
                @SelectSecondProjectile.canceled += instance.OnSelectSecondProjectile;
                @SelectThirdProjectile.started += instance.OnSelectThirdProjectile;
                @SelectThirdProjectile.performed += instance.OnSelectThirdProjectile;
                @SelectThirdProjectile.canceled += instance.OnSelectThirdProjectile;
                @SelectForthProjectile.started += instance.OnSelectForthProjectile;
                @SelectForthProjectile.performed += instance.OnSelectForthProjectile;
                @SelectForthProjectile.canceled += instance.OnSelectForthProjectile;
            }
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_Console;
    public struct DebugActions
    {
        private @Controls m_Wrapper;
        public DebugActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Console => m_Wrapper.m_Debug_Console;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @Console.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnConsole;
                @Console.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnConsole;
                @Console.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnConsole;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Console.started += instance.OnConsole;
                @Console.performed += instance.OnConsole;
                @Console.canceled += instance.OnConsole;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);
    public interface IGamePlayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRangeAttack(InputAction.CallbackContext context);
        void OnRangeAttackBreak(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnMap(InputAction.CallbackContext context);
        void OnSelectFirstProjectile(InputAction.CallbackContext context);
        void OnSelectSecondProjectile(InputAction.CallbackContext context);
        void OnSelectThirdProjectile(InputAction.CallbackContext context);
        void OnSelectForthProjectile(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnConsole(InputAction.CallbackContext context);
    }
}
